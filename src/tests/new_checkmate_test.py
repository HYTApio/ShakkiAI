import unittest
from new_checkmate import is_check
import chess


class TestCheckmate(unittest.TestCase):
    def setUp(self):
        self.board = chess.Board()

    def test_beginning_not_check(self):
        self.assertEqual(is_check(self.board, None)[0], False)

    def test_check_move_to_same_file(self):
        board = chess.Board('4k3/8/8/8/8/8/8/Q6K w KQkq - 0 1')
        board.push(chess.Move.from_uci("a1e1"))
        last_move = chess.Move.from_uci("a1e1")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('4k3/8/8/4q3/8/8/8/R6K w KQkq - 0 1')
        board.push(chess.Move.from_uci("a1e1"))
        last_move = chess.Move.from_uci("a1e1")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('Q6K/8/8/8/8/8/8/4k3 w KQkq - 0 1')
        board.push(chess.Move.from_uci("a8e8"))
        last_move = chess.Move.from_uci("a8e8")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('R6K/8/8/8/4q3/8/8/4k3 w KQkq - 0 1')
        board.push(chess.Move.from_uci("a8e8"))
        last_move = chess.Move.from_uci("a8e8")
        self.assertEqual(is_check(board, last_move)[0], False)

    def test_check_move_to_same_rank(self):
        board = chess.Board('K7/8/8/8/8/8/Q7/3k4 w KQkq - 0 1')
        board.push(chess.Move.from_uci("a2a1"))
        last_move = chess.Move.from_uci("a2a1")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/8/8/8/8/8/R7/2qk4 w KQkq - 0 1')
        board.push(chess.Move.from_uci("a2a1"))
        last_move = chess.Move.from_uci("a2a1")        
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('3k4/8/8/8/8/8/8/Q2K4 w KQkq - 0 1')
        board.push(chess.Move.from_uci("a1a8"))
        last_move = chess.Move.from_uci("a1a8")   
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('2qk4/8/8/8/8/8/8/Q2K4 w KQkq - 0 1')
        board.push(chess.Move.from_uci("a1a8"))
        last_move = chess.Move.from_uci("a1a8")   
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('2qkq3/8/8/8/8/8/8/Q2K3Q w KQkq - 0 1')
        board.push(chess.Move.from_uci("h1h8"))
        last_move = chess.Move.from_uci("h1h8")   
        self.assertEqual(is_check(board, last_move)[0], False)

    def test_check_move_to_diagonal(self):
        board = chess.Board('K7/8/8/8/8/4k3/8/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b1c1"))
        last_move = chess.Move.from_uci("b1c1")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/8/8/8/8/4k3/8/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b1g1"))
        last_move = chess.Move.from_uci("b1g1")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/8/8/1Q6/8/4k3/8/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b5c5"))
        last_move = chess.Move.from_uci("b5c5")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/8/8/1Q6/8/4k3/8/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b5g5"))
        last_move = chess.Move.from_uci("b5g5")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/8/8/8/8/4k3/3q4/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b1c1"))
        last_move = chess.Move.from_uci("b1c1")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/8/8/8/8/4k3/5q2/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b1g1"))
        last_move = chess.Move.from_uci("b1g1")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/8/8/1Q6/3q4/4k3/8/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b5c5"))
        last_move = chess.Move.from_uci("b5c5")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/8/8/1Q6/5q2/4k3/8/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b5g5"))
        last_move = chess.Move.from_uci("b5g5")
        self.assertEqual(is_check(board, last_move)[0], False)
    
    def test_check_from_knight(self):
        board = chess.Board('K7/8/8/1Q6/8/4k3/8/4N3 w KQkq - 0 1')
        board.push(chess.Move.from_uci("e1c2"))
        last_move = chess.Move.from_uci("e1c2")
        print(board)
        self.assertEqual(is_check(board, last_move)[0], True)
    
    def test_check_from_soldier(self):
        board = chess.Board('K7/8/8/8/8/4k3/8/3P4 w KQkq - 0 1')
        board.push(chess.Move.from_uci("d1d2"))
        last_move = chess.Move.from_uci("d1d2")
        self.assertEqual(is_check(board, last_move)[0], True)

    def test_check_from_behind_same_rank(self):
        board = chess.Board('K7/8/8/8/8/8/8/QQ2k3 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b1b2"))
        last_move = chess.Move.from_uci("b1b2")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/8/8/8/8/8/8/4k1QQ w KQkq - 0 1')
        board.push(chess.Move.from_uci("g1g2"))
        last_move = chess.Move.from_uci("g1g2")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/8/8/8/8/8/8/QQ1qk3 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b1b2"))
        last_move = chess.Move.from_uci("b1b2")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/8/8/8/8/8/8/4kqQQ w KQkq - 0 1')
        board.push(chess.Move.from_uci("g1g2"))
        last_move = chess.Move.from_uci("g1g2")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/8/8/8/8/8/8/QQ1pk3 w KQkq - 0 1')
        board.push(chess.Move.from_uci("b1b2"))
        last_move = chess.Move.from_uci("b1b2")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/8/8/8/8/8/8/4kpQQ w KQkq - 0 1')
        board.push(chess.Move.from_uci("g1g2"))
        last_move = chess.Move.from_uci("g1g2")
        self.assertEqual(is_check(board, last_move)[0], False)

    def test_check_from_behind_same_file(self):
        board = chess.Board('K7/8/8/8/4k3/8/4Q3/4Q3 w KQkq - 0 1')
        board.push(chess.Move.from_uci("e2d2"))
        last_move = chess.Move.from_uci("e2d2")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K3Q3/4Q3/8/8/4k3/8/8/8 w KQkq - 0 1')
        board.push(chess.Move.from_uci("e7d7"))
        last_move = chess.Move.from_uci("e7d7")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/8/8/8/4k3/4q3/4Q3/4Q3 w KQkq - 0 1')
        board.push(chess.Move.from_uci("e2d2"))
        last_move = chess.Move.from_uci("e2d2")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K3Q3/4Q3/8/4p3/4k3/8/8/8 w KQkq - 0 1')
        board.push(chess.Move.from_uci("e7d7"))
        last_move = chess.Move.from_uci("e7d7")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/8/8/8/4k3/4p3/4Q3/4Q3 w KQkq - 0 1')
        board.push(chess.Move.from_uci("e2d2"))
        last_move = chess.Move.from_uci("e2d2")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K3Q3/4Q3/8/4q3/4k3/8/8/8 w KQkq - 0 1')
        board.push(chess.Move.from_uci("e7d7"))
        last_move = chess.Move.from_uci("e7d7")
        self.assertEqual(is_check(board, last_move)[0], False)

    def test_check_from_behind_diagonally(self):
        board = chess.Board('K7/8/8/8/4k3/8/2Q5/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("c2d2"))
        last_move = chess.Move.from_uci("c2d2")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/8/8/8/4k3/8/6Q1/7Q w KQkq - 0 1')
        board.push(chess.Move.from_uci("g2h2"))
        last_move = chess.Move.from_uci("g2h2")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/1Q6/2Q5/8/4k3/8/8/8 w KQkq - 0 1')
        board.push(chess.Move.from_uci("c6d6"))
        last_move = chess.Move.from_uci("c6d6")
        self.assertEqual(is_check(board, last_move)[0], True)
        board = chess.Board('K7/7Q/6Q1/8/4k3/8/8/8 w KQkq - 0 1')
        board.push(chess.Move.from_uci("g6h6"))
        last_move = chess.Move.from_uci("g6h6")
        self.assertEqual(is_check(board, last_move)[0], True)

        board = chess.Board('K7/8/8/8/4k3/3q4/2Q5/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("c2d2"))
        last_move = chess.Move.from_uci("c2d2")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/8/8/8/4k3/5q2/6Q1/7Q w KQkq - 0 1')
        board.push(chess.Move.from_uci("g2h2"))
        last_move = chess.Move.from_uci("g2h2")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/1Q6/2Q5/3p4/4k3/8/8/8 w KQkq - 0 1')
        board.push(chess.Move.from_uci("c6d6"))
        last_move = chess.Move.from_uci("c6d6")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/7Q/6Q1/5p2/4k3/8/8/8 w KQkq - 0 1')
        board.push(chess.Move.from_uci("g6h6"))
        last_move = chess.Move.from_uci("g6h6")
        self.assertEqual(is_check(board, last_move)[0], True)

        board = chess.Board('K7/8/8/8/4k3/3p4/2Q5/1Q6 w KQkq - 0 1')
        board.push(chess.Move.from_uci("c2d2"))
        last_move = chess.Move.from_uci("c2d2")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/8/8/8/4k3/5p2/6Q1/7Q w KQkq - 0 1')
        board.push(chess.Move.from_uci("g2h2"))
        last_move = chess.Move.from_uci("g2h2")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/1Q6/2Q5/3q4/4k3/8/8/8 w KQkq - 0 1')
        board.push(chess.Move.from_uci("c6d6"))
        last_move = chess.Move.from_uci("c6d6")
        self.assertEqual(is_check(board, last_move)[0], False)
        board = chess.Board('K7/7Q/6Q1/5q2/4k3/8/8/8 w KQkq - 0 1')
        board.push(chess.Move.from_uci("g6h6"))
        last_move = chess.Move.from_uci("g6h6")
        self.assertEqual(is_check(board, last_move)[0], True)